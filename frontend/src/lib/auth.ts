// frontend/src/lib/auth.ts - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
import { api } from './api';
import { telegram } from './telegram';

export class AuthManager {
  private static instance: AuthManager;
  private refreshTimeout: NodeJS.Timeout | null = null;

  static getInstance(): AuthManager {
    if (!AuthManager.instance) {
      AuthManager.instance = new AuthManager();
    }
    return AuthManager.instance;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ
  async checkAndRefreshToken(): Promise<boolean> {
    if (typeof window === 'undefined') return false;
    
    const token = localStorage.getItem('auth_token');
    if (!token) return false;

    try {
      // –ü–∞—Ä—Å–∏–º —Ç–æ–∫–µ–Ω —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
      const payload = JSON.parse(atob(token.split('.')[1]));
      const exp = payload.exp;
      const now = Math.floor(Date.now() / 1000);
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
      if (exp - now < 300) {
        console.log('üîÑ Token expires soon, refreshing...');
        return await this.refreshToken();
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå Token validation error:', error);
      return false;
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ refresh endpoint
  async refreshToken(): Promise<boolean> {
    try {
      const response = await api.refreshToken();
      api.setToken(response.access_token);
      console.log('‚úÖ Token refreshed successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Token refresh failed:', error);
      return await this.reLogin();
    }
  }

  // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ Telegram
  async reLogin(): Promise<boolean> {
    try {
      await telegram.waitForReady();
      const initData = telegram.getInitData();
      
      if (!initData) {
        console.error('‚ùå No Telegram init data for re-login');
        return false;
      }

      const response = await api.login(initData);
      api.setToken(response.access_token);
      console.log('‚úÖ Re-login successful');
      return true;
    } catch (error) {
      console.error('‚ùå Re-login failed:', error);
      this.logout();
      return false;
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏)
  logout() {
    // –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É logout
    window.location.href = '/logout';
  }

  // –ü—Ä—è–º–æ–π logout –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
  logoutImmediate() {
    this.stopTokenRefreshTimer();
    localStorage.removeItem('auth_token');
    sessionStorage.clear();
    window.location.href = '/login';
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞
  startTokenRefreshTimer() {
    if (this.refreshTimeout) {
      clearInterval(this.refreshTimeout);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    this.refreshTimeout = setInterval(() => {
      this.checkAndRefreshToken();
    }, 10 * 60 * 1000);
  }

  stopTokenRefreshTimer() {
    if (this.refreshTimeout) {
      clearInterval(this.refreshTimeout);
      this.refreshTimeout = null;
    }
  }
}

export const authManager = AuthManager.getInstance();
