import asyncio
import logging
import httpx
from typing import Optional
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from config import settings
from database import get_db, SessionLocal
from models.user import User
from models.test import TestResult
from sqlalchemy import select, func, desc

# Telegram imports
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AITUBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.info(f"ü§ñ Initializing AITU Bot...")
        self.app = Application.builder().token(settings.telegram_bot_token).build()
        self.webapp_url = f"https://{settings.domain}"
        self.chat_service_url = "http://chat-service:8000"
        self.setup_handlers()
    
    def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.app.add_handler(CommandHandler("tests", self.tests_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("results", self.results_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è AI —á–∞—Ç–∞
        self.app.add_handler(CommandHandler("chat", self.chat_command))
        self.app.add_handler(CommandHandler("ask", self.ask_command))
        self.app.add_handler(CommandHandler("stop", self.stop_chat))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞—è–≤–æ–∫
        self.app.add_handler(CommandHandler("application", self.application_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_message
        ))
        
        logger.info("‚úÖ Bot handlers registered")
    
    # === –ö–û–ú–ê–ù–î–ê START ===
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        user = update.effective_user
        logger.info(f"üì± /start from user: {user.id} (@{user.username})")
        
        # –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton(
                "üöÄ –û—Ç–∫—Ä—ã—Ç—å AITU Test App",
                web_app=WebAppInfo(url=self.webapp_url)
            )],
            [
                InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã", callback_data="menu_tests"),
                InlineKeyboardButton("ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫", callback_data="menu_chat")
            ],
            [
                InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="menu_status"),
                InlineKeyboardButton("üéì –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="menu_application")
            ],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AITU Bot!*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
- üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é
- üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã AET
- ü§ñ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- üìÑ –ü–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã

*–ß—Ç–æ —Ç–∞–∫–æ–µ AET?*
AITU Excellence Test - —ç—Ç–æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã.
        """
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    # === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–ï–°–¢–û–í ===
    async def tests_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        keyboard = [
            [InlineKeyboardButton(
                "üìù –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                web_app=WebAppInfo(url=f"{self.webapp_url}/tests")
            )],
            [
                InlineKeyboardButton("üíª ICT", callback_data="test_info_ict"),
                InlineKeyboardButton("üß† Logical", callback_data="test_info_logical")
            ],
            [
                InlineKeyboardButton("üìñ Reading", callback_data="test_info_reading"),
                InlineKeyboardButton("üá¨üáß English", callback_data="test_info_english")
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        tests_text = """
üìù *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã AET:*

*–ú–æ–¥—É–ª—å 1 - –ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:*
- üíª *ICT* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
- üß† *Logical* - –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ

*–ú–æ–¥—É–ª—å 2 - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫:*
- üìñ *Reading* - –ß—Ç–µ–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
- üá¨üáß *Use of English* - –ü—Ä–∞–∫—Ç–∏–∫–∞ —è–∑—ã–∫–∞
- üìö *Grammar* - –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞

–ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç:
- ‚è± 60 –º–∏–Ω—É—Ç
- üìä 20 –≤–æ–ø—Ä–æ—Å–æ–≤
- üéØ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: 70%

–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.
        """
        
        if update.message:
            await update.message.reply_text(
                tests_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.edit_message_text(
                tests_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        try:
            async with SessionLocal() as db:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await db.execute(
                    select(User).where(User.telegram_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if not user:
                    await update.message.reply_text(
                        "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n"
                        "–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ /start"
                    )
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats_result = await db.execute(
                    select(
                        func.count(TestResult.id).label('total_tests'),
                        func.avg(TestResult.percentage).label('avg_score'),
                        func.max(TestResult.percentage).label('best_score')
                    ).where(TestResult.user_id == user.id)
                )
                stats = stats_result.first()
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                recent_results = await db.execute(
                    select(TestResult)
                    .where(TestResult.user_id == user.id)
                    .order_by(desc(TestResult.created_at))
                    .limit(5)
                )
                recent = recent_results.scalars().all()
                
                status_text = f"""
üë§ *–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
- –£—Ä–æ–≤–µ–Ω—å: {user.level} 
- –ë–∞–ª–ª—ã: {user.points:,}
- –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {stats.total_tests or 0}
- –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats.avg_score or 0:.1f}%
- –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats.best_score or 0:.1f}%

üìà *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ—Å—Ç—ã:*"""
                
                if recent:
                    for r in recent:
                        emoji = "‚úÖ" if r.passed else "‚ùå"
                        status_text += f"\n{emoji} {r.percentage:.1f}% - {r.points_earned} –±–∞–ª–ª–æ–≤"
                else:
                    status_text += "\n–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                
                keyboard = [[
                    InlineKeyboardButton(
                        "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                        web_app=WebAppInfo(url=f"{self.webapp_url}/profile")
                    )
                ]]
                
                await update.message.reply_text(
                    status_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
        except Exception as e:
            logger.error(f"Error in status_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    async def results_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
        keyboard = [[
            InlineKeyboardButton(
                "üìà –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                web_app=WebAppInfo(url=f"{self.webapp_url}/profile")
            )
        ]]
        
        await update.message.reply_text(
            "üìä *–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤*\n\n"
            "–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, "
            "–∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º–∏.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    # === –ö–û–ú–ê–ù–î–´ –î–õ–Ø AI –ß–ê–¢–ê ===
    async def chat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º AI —á–∞—Ç–∞"""
        user = update.effective_user
        logger.info(f"ü§ñ /chat from user: {user.id}")
        
        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —á–∞—Ç–∞
        context.user_data['chat_mode'] = True
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", callback_data="stop_chat")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        chat_text = """
ü§ñ *AI –ü–æ–º–æ—â–Ω–∏–∫ AITU –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*

–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ:
- üéì –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ AITU
- üìã –ù–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö  
- üìù –¢–µ—Å—Ç–∞—Ö AET
- üí∞ –ì—Ä–∞–Ω—Ç–∞—Ö –∏ –æ–ø–ª–∞—Ç–µ
- üè† –û–±—â–µ–∂–∏—Ç–∏–∏
- üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ–±—É—á–µ–Ω–∏—è

*–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!*

–ü—Ä–∏–º–µ—Ä—ã:
- _–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?_
- _–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç AET —Ç–µ—Å—Ç?_
- _–ï—Å—Ç—å –ª–∏ –≥—Ä–∞–Ω—Ç—ã –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤?_
- _–ö–∞–∫–æ–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª?_

–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π /stop –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
        """
        
        await update.message.reply_text(
            chat_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def ask_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å AI –±–µ–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞"""
        if not context.args:
            examples_text = """
‚ùì *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /ask*

–§–æ—Ä–º–∞—Ç: `/ask —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å`

*–ü—Ä–∏–º–µ—Ä—ã:*
- `/ask –ö–∞–∫–æ–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –≤ AITU?`
- `/ask –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?`
- `/ask –ö–∞–∫–∏–µ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?`
- `/ask –ù—É–∂–Ω–æ –ª–∏ —Å–¥–∞–≤–∞—Ç—å –ï–ù–¢?`
            """
            await update.message.reply_text(
                examples_text,
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        question = " ".join(context.args)
        await update.message.chat.send_action("typing")
        await self.send_to_chat_service(update, question)
    
    async def stop_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞"""
        context.user_data['chat_mode'] = False
        
        keyboard = [[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]]
        
        await update.message.reply_text(
            "üõë *–†–µ–∂–∏–º —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω*\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –ø–æ–º–æ—â–Ω–∏–∫–∞!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /chat —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —á–∞—Ç–∞
        if not context.user_data.get('chat_mode', False):
            # –ù–µ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await update.message.reply_text(
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π /chat –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º\n"
                "–∏–ª–∏ /ask –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
            )
            return
        
        # –í —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI
        await update.message.chat.send_action("typing")
        await self.send_to_chat_service(update, update.message.text)
    
    async def send_to_chat_service(self, update: Update, query: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ chat service"""
        user = update.effective_user
        session_id = f"telegram_{user.id}"
        
        try:
            logger.info(f"üîÑ Sending to chat service: {query[:50]}...")
            
            async with httpx.AsyncClient(timeout=60.0) as client:
                response = await client.post(
                    f"{self.chat_service_url}/api/student/chat",
                    json={
                        "query": query,
                        "session_id": session_id
                    }
                )
                
                if response.status_code == 200:
                    data = response.json()
                    answer = data.get("answer", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
                    sources = data.get("sources", [])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    await self.send_formatted_answer(update, answer, sources)
                    
                else:
                    logger.error(f"Chat service error: {response.status_code}")
                    await update.message.reply_text(
                        "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
                    )
                    
        except httpx.ConnectError:
            logger.error("Cannot connect to chat service")
            await update.message.reply_text(
                "‚ùå AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
            )
        except Exception as e:
            logger.error(f"Error in chat: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def send_formatted_answer(self, update: Update, answer: str, sources: list):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        max_length = 3800
        
        if len(answer) <= max_length:
            # –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
            text = f"üí¨ *–û—Ç–≤–µ—Ç AI:*\n\n{answer}"
            
            if sources:
                text += "\n\nüìö *–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*\n" + "\n".join(f"‚Ä¢ {s}" for s in sources[:3])
            
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            # –î–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º
            parts = []
            current_part = ""
            
            paragraphs = answer.split('\n\n')
            for para in paragraphs:
                if len(current_part) + len(para) > max_length:
                    parts.append(current_part)
                    current_part = para
                else:
                    current_part += "\n\n" + para if current_part else para
            
            if current_part:
                parts.append(current_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            for i, part in enumerate(parts):
                if i == 0:
                    await update.message.reply_text(
                        f"üí¨ *–û—Ç–≤–µ—Ç AI:*\n\n{part}",
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    await update.message.reply_text(part)
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            if sources:
                await update.message.reply_text(
                    "üìö *–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*\n" + "\n".join(f"‚Ä¢ {s}" for s in sources[:3]),
                    parse_mode=ParseMode.MARKDOWN
                )
    
    # === –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ó–ê–Ø–í–û–ö ===
    async def application_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏"""
        keyboard = [
            [InlineKeyboardButton(
                "üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                web_app=WebAppInfo(url=f"{self.webapp_url}/applications")
            )],
            [InlineKeyboardButton(
                "‚ùì –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?",
                callback_data="docs_info"
            )]
        ]
        
        application_text = """
üéì *–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –≤ AITU*

*–î–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:*
1. –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã AET
2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
3. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É
4. –î–æ–∂–¥–∞—Ç—å—Å—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è

*–¢—Ä–µ–±—É–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:*
- –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
- –ê—Ç—Ç–µ—Å—Ç–∞—Ç –æ —Å—Ä–µ–¥–Ω–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ï–ù–¢ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
- –§–æ—Ç–æ 3—Ö4
- –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ 086-–£

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –æ–Ω–ª–∞–π–Ω.
        """
        
        await update.message.reply_text(
            application_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    # === –ö–û–ú–ê–ù–î–ê HELP ===
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
üìö *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º AITU Bot*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:*
/tests - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
/status - –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
/results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤

*AI –ü–æ–º–æ—â–Ω–∏–∫:*
/chat - –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞
/ask `–≤–æ–ø—Ä–æ—Å` - –ë—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å
/stop - –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞

*–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ:*
/application - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è AI:*
- –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?
- –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç AET —Ç–µ—Å—Ç?
- –ï—Å—Ç—å –ª–∏ –≥—Ä–∞–Ω—Ç—ã?
- –ö–∞–∫–æ–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª?
- –ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–∏–µ–º?

üí° *–°–æ–≤–µ—Ç:* –í —Ä–µ–∂–∏–º–µ /chat –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã!

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @aitu_support
        """
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ===
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        # –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        if query.data == "back_to_menu":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton(
                    "üöÄ –û—Ç–∫—Ä—ã—Ç—å AITU Test App",
                    web_app=WebAppInfo(url=self.webapp_url)
                )],
                [
                    InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã", callback_data="menu_tests"),
                    InlineKeyboardButton("ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫", callback_data="menu_chat")
                ],
                [
                    InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="menu_status"),
                    InlineKeyboardButton("üéì –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="menu_application")
                ],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")]
            ]
            
            await query.edit_message_text(
                "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif query.data == "menu_tests":
            await self.tests_command(update, context)
        
        elif query.data == "menu_chat":
            context.user_data['chat_mode'] = True
            await query.edit_message_text(
                "ü§ñ *AI –ü–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
                "–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç.\n"
                "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop",
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif query.data == "menu_status":
            await query.edit_message_text("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            # –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è status_command
            await self.status_command(query, context)
        
        elif query.data == "menu_application":
            keyboard = [
                [InlineKeyboardButton(
                    "üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                    web_app=WebAppInfo(url=f"{self.webapp_url}/applications")
                )],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
            
            await query.edit_message_text(
                "üéì *–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –≤ AITU*\n\n"
                "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–æ—Ä–º–µ –∑–∞—è–≤–∫–∏.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif query.data == "menu_help":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            help_text = """
üìö *–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞*

- /chat - –æ–±—â–µ–Ω–∏–µ —Å AI
- /tests - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
- /status - —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
- /application - –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É

–ù—É–∂–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å? –ò—Å–ø–æ–ª—å–∑—É–π /help
            """
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            
            await query.edit_message_text(
                help_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif query.data == "stop_chat":
            context.user_data['chat_mode'] = False
            await query.edit_message_text(
                "üõë *–†–µ–∂–∏–º —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω*\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –ø–æ–º–æ—â–Ω–∏–∫–∞!"
            )
        
        elif query.data.startswith("test_info_"):
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–µ—Å—Ç–µ
            test_type = query.data.replace("test_info_", "")
            test_info = {
                "ict": ("üíª ICT", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, Office, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"),
                "logical": ("üß† Logical", "–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–ó–∞–¥–∞—á–∏ –Ω–∞ –ª–æ–≥–∏–∫—É, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∞–Ω–∞–ª–∏–∑"),
                "reading": ("üìñ Reading", "–ß—Ç–µ–Ω–∏–µ", "–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"),
                "english": ("üá¨üáß English", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞")
            }
            
            if test_type in test_info:
                emoji, name, desc = test_info[test_type]
                keyboard = [
                    [InlineKeyboardButton(
                        "üìù –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç",
                        web_app=WebAppInfo(url=f"{self.webapp_url}/tests")
                    )],
                    [InlineKeyboardButton("‚óÄÔ∏è –ö —Ç–µ—Å—Ç–∞–º", callback_data="menu_tests")]
                ]
                
                await query.edit_message_text(
                    f"{emoji} *{name}*\n\n{desc}\n\n"
                    f"‚è± –í—Ä–µ–º—è: 60 –º–∏–Ω—É—Ç\n"
                    f"üìä –í–æ–ø—Ä–æ—Å–æ–≤: 20\n"
                    f"üéØ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: 70%",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        
        elif query.data == "docs_info":
            docs_text = """
üìã *–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:*

1. *–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏* (–∫–æ–ø–∏—è)
2. *–ê—Ç—Ç–µ—Å—Ç–∞—Ç* –æ —Å—Ä–µ–¥–Ω–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª)
3. *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ï–ù–¢* (–µ—Å–ª–∏ –µ—Å—Ç—å)
4. *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 3—Ö4* - 6 —à—Ç—É–∫
5. *–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞* —Ñ–æ—Ä–º–∞ 086-–£
6. *–ü—Ä–∏–ø–∏—Å–Ω–æ–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ* (–¥–ª—è —é–Ω–æ—à–µ–π)

üí° –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!
            """
            
            keyboard = [
                [InlineKeyboardButton(
                    "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    web_app=WebAppInfo(url=f"{self.webapp_url}/applications")
                )],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
            
            await query.edit_message_text(
                docs_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    # === –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
    async def send_notification(self, user_telegram_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.app.bot.send_message(
                chat_id=user_telegram_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.info(f"‚úÖ Notification sent to {user_telegram_id}")
        except Exception as e:
            logger.error(f"‚ùå Failed to send notification: {e}")
    
    # === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ Starting AITU Bot...")
        try:
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling(allowed_updates=Update.ALL_TYPES)
            logger.info("‚úÖ AITU Bot is running!")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
            await asyncio.Event().wait()
        except Exception as e:
            logger.error(f"‚ùå Bot startup failed: {e}")
            raise

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = AITUBot()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Critical error: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())