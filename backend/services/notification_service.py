import asyncio
import logging
from typing import List, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from database import get_db
from models.user import User
from models.notifications import Notification
from config import settings

logger = logging.getLogger(__name__)

class NotificationService:
    @staticmethod
    async def create_notification(
        user_id: str,
        title: str,
        message: str,
        notification_type: str,
        data: Dict[str, Any] = None
    ) -> Notification:
        """Create a new notification and send to Telegram"""
        async for db in get_db():
            try:
                notification = Notification(
                    user_id=user_id,
                    title=title,
                    message=message,
                    type=notification_type,
                    data=data or {}
                )
                
                db.add(notification)
                await db.commit()
                await db.refresh(notification)
                
                logger.info(f"‚úÖ Notification created: {notification.id}")
                
                # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –±–µ–∑ circular imports
                try:
                    await NotificationService._send_telegram_notification(user_id, title, message)
                except Exception as e:
                    logger.error(f"‚ùå Failed to send Telegram notification: {e}")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                
                return notification
                
            except Exception as e:
                logger.error(f"‚ùå Failed to create notification: {e}")
                await db.rollback()
                raise
            finally:
                break
    
    @staticmethod
    async def _send_telegram_notification(user_id: str, title: str, message: str):
        """Send notification via Telegram (production version)"""
        try:
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç Telegram Bot API
            from telegram import Bot
            from telegram.constants import ParseMode
            
            # Get user's Telegram ID
            async for db in get_db():
                result = await db.execute(select(User).where(User.id == user_id))
                user = result.scalar_one_or_none()
                
                if user and user.telegram_id:
                    # Create bot instance
                    bot = Bot(token=settings.telegram_bot_token)
                    
                    notification_text = f"*{title}*\n\n{message}"
                    
                    await bot.send_message(
                        chat_id=user.telegram_id,
                        text=notification_text,
                        parse_mode=ParseMode.MARKDOWN
                    )
                    
                    logger.info(f"‚úÖ Telegram notification sent to user {user.telegram_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è User {user_id} has no Telegram ID")
                break
                
        except Exception as e:
            logger.error(f"‚ùå Failed to send Telegram notification: {e}")
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    
    @staticmethod
    async def notify_test_completion(user_id: str, test_title: str, score: float, passed: bool, points_earned: int):
        """Notify user about test completion"""
        try:
            status_emoji = "üéâ" if passed else "üìö"
            title = f"{status_emoji} –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {test_title}"
            
            if passed:
                message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {score:.1f}% –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {points_earned} –±–∞–ª–ª–æ–≤!"
            else:
                message = f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {score:.1f}%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!"
            
            await NotificationService.create_notification(
                user_id=user_id,
                title=title,
                message=message,
                notification_type="test_result",
                data={
                    "test_title": test_title,
                    "score": score,
                    "passed": passed,
                    "points_earned": points_earned
                }
            )
            
            logger.info(f"‚úÖ Test completion notification sent for user {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to send test completion notification: {e}")
    
    @staticmethod
    async def notify_application_status_change(user_id: str, application_id: str, new_status: str):
        """Notify user about application status change"""
        try:
            status_messages = {
                "reviewing": {"emoji": "üîç", "title": "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", "message": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏."},
                "approved": {"emoji": "‚úÖ", "title": "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞", "message": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."},
                "rejected": {"emoji": "‚ùå", "title": "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", "message": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."},
                "accepted": {"emoji": "üéì", "title": "–í—ã –ø—Ä–∏–Ω—è—Ç—ã!", "message": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã –≤ AITU. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"}
            }
            
            status_info = status_messages.get(new_status, {
                "emoji": "üìã",
                "title": "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω",
                "message": f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}"
            })
            
            await NotificationService.create_notification(
                user_id=user_id,
                title=f"{status_info['emoji']} {status_info['title']}",
                message=status_info['message'],
                notification_type="application_status",
                data={
                    "application_id": application_id,
                    "status": new_status
                }
            )
            
            logger.info(f"‚úÖ Application status notification sent for user {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to send application status notification: {e}")
    
    @staticmethod
    async def notify_achievement_earned(user_id: str, achievement_title: str, achievement_points: int):
        """Notify user about new achievement"""
        try:
            await NotificationService.create_notification(
                user_id=user_id,
                title=f"üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement_title}",
                message=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '{achievement_title}' –∏ –ø–æ–ª—É—á–∏–ª–∏ {achievement_points} –±–∞–ª–ª–æ–≤!",
                notification_type="achievement",
                data={
                    "achievement_title": achievement_title,
                    "points": achievement_points
                }
            )
            
            logger.info(f"‚úÖ Achievement notification sent for user {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to send achievement notification: {e}")

# üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º Celery –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞, –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏