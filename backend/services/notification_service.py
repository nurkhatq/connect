import asyncio
from typing import List, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from database import get_db
from models.user import User
from models.notifications import Notification
from celery import Celery
from config import settings
import json

# Celery app
celery_app = Celery(
    "aitu-notifications",
    broker=settings.redis_url,
    backend=settings.redis_url
)

class NotificationService:
    @staticmethod
    async def create_notification(
        user_id: str,
        title: str,
        message: str,
        notification_type: str,
        data: Dict[str, Any] = None
    ) -> Notification:
        """Create a new notification"""
        async for db in get_db():
            notification = Notification(
                user_id=user_id,
                title=title,
                message=message,
                type=notification_type,
                data=data or {}
            )
            
            db.add(notification)
            await db.commit()
            await db.refresh(notification)
            
            # Send to Telegram bot
            send_telegram_notification.delay(user_id, title, message)
            
            return notification
    
    @staticmethod
    async def notify_test_completion(user_id: str, test_title: str, score: float, passed: bool, points_earned: int):
        """Notify user about test completion"""
        status_emoji = "üéâ" if passed else "üìö"
        title = f"{status_emoji} –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {test_title}"
        
        if passed:
            message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {score:.1f}% –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {points_earned} –±–∞–ª–ª–æ–≤!"
        else:
            message = f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {score:.1f}%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!"
        
        await NotificationService.create_notification(
            user_id=user_id,
            title=title,
            message=message,
            notification_type="test_result",
            data={
                "test_title": test_title,
                "score": score,
                "passed": passed,
                "points_earned": points_earned
            }
        )
    
    @staticmethod
    async def notify_application_status_change(user_id: str, application_id: str, new_status: str):
        """Notify user about application status change"""
        status_messages = {
            "reviewing": {"emoji": "üîç", "title": "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", "message": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏."},
            "approved": {"emoji": "‚úÖ", "title": "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞", "message": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."},
            "rejected": {"emoji": "‚ùå", "title": "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", "message": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."},
            "accepted": {"emoji": "üéì", "title": "–í—ã –ø—Ä–∏–Ω—è—Ç—ã!", "message": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã –≤ AITU. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"}
        }
        
        status_info = status_messages.get(new_status, {
            "emoji": "üìã",
            "title": "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω",
            "message": f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}"
        })
        
        await NotificationService.create_notification(
            user_id=user_id,
            title=f"{status_info['emoji']} {status_info['title']}",
            message=status_info['message'],
            notification_type="application_status",
            data={
                "application_id": application_id,
                "status": new_status
            }
        )
    
    @staticmethod
    async def notify_achievement_earned(user_id: str, achievement_title: str, achievement_points: int):
        """Notify user about new achievement"""
        await NotificationService.create_notification(
            user_id=user_id,
            title=f"üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement_title}",
            message=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '{achievement_title}' –∏ –ø–æ–ª—É—á–∏–ª–∏ {achievement_points} –±–∞–ª–ª–æ–≤!",
            notification_type="achievement",
            data={
                "achievement_title": achievement_title,
                "points": achievement_points
            }
        )

@celery_app.task
def send_telegram_notification(user_id: str, title: str, message: str):
    """Send notification via Telegram bot"""
    asyncio.run(_send_telegram_notification(user_id, title, message))

async def _send_telegram_notification(user_id: str, title: str, message: str):
    """Async function to send Telegram notification"""
    try:
        from bot.main import AITUBot
        
        # Get user's Telegram ID
        async for db in get_db():
            result = await db.execute(select(User).where(User.id == user_id))
            user = result.scalar_one_or_none()
            
            if user and user.telegram_id:
                bot = AITUBot()
                notification_text = f"*{title}*\n\n{message}"
                await bot.send_notification(user.telegram_id, notification_text)
            break
            
    except Exception as e:
        print(f"Failed to send Telegram notification: {e}")
