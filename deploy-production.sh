
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
echo "üîí Setting permissions..."
chown -R aitu:aitu $APP_DIR
chmod 755 backend/uploads
chmod 644 backend/data/*.json
chmod 600 .env

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
echo "‚öôÔ∏è Creating systemd service..."
cat > /etc/systemd/system/aitu-excellence-test.service << EOF
[Unit]
Description=AITU Excellence Test Application
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$APP_DIR
ExecStart=/usr/bin/docker-compose -f docker-compose.prod.yml up -d
ExecStop=/usr/bin/docker-compose -f docker-compose.prod.yml down
User=root

[Install]
WantedBy=multi-user.target
EOF

systemctl enable aitu-excellence-test.service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥—Ä–æ—Ç–∞—Ü–∏–∏
echo "üìù Setting up log rotation..."
cat > /etc/logrotate.d/aitu << EOF
$APP_DIR/nginx/logs/*.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    sharedscripts
    postrotate
        docker-compose -f $APP_DIR/docker-compose.prod.yml exec nginx nginx -s reload
    endscript
}
EOF

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ç–∫–∞–ø–æ–≤
echo "üíæ Setting up automated backups..."
cat > /etc/cron.d/aitu-backup << EOF
# Daily database backup at 2 AM
0 2 * * * root cd $APP_DIR && docker-compose -f docker-compose.prod.yml exec -T db pg_dump -U aitu_user aitu_db | gzip > $BACKUP_DIR/db-backup-\$(date +\%Y\%m\%d-\%H\%M\%S).sql.gz

# Weekly cleanup of old backups (keep 30 days)
0 3 * * 0 root find $BACKUP_DIR -name "*.sql.gz" -mtime +30 -delete
EOF

# Fail2ban –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
echo "üõ°Ô∏è Setting up fail2ban..."
cat > /etc/fail2ban/jail.local << EOF
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 5

[nginx-http-auth]
enabled = true

[nginx-limit-req]
enabled = true
EOF

systemctl enable fail2ban
systemctl start fail2ban

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "üèóÔ∏è Building and starting application..."
docker-compose -f docker-compose.prod.yml build
docker-compose -f docker-compose.prod.yml up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "‚è≥ Waiting for services to start..."
sleep 30

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üóÑÔ∏è Initializing database..."
docker-compose -f docker-compose.prod.yml exec -T backend python -c "
import asyncio
from database import init_db
from main import load_test_data

async def init():
    await init_db()
    await load_test_data()
    print('‚úÖ Database and test data initialized')

asyncio.run(init())
"

# –ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
echo "üîí Obtaining SSL certificate..."
docker-compose -f docker-compose.prod.yml run --rm certbot

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx —Å SSL
docker-compose -f docker-compose.prod.yml restart nginx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL
echo "üîÑ Setting up SSL auto-renewal..."
cat > /etc/cron.d/certbot-renew << EOF
0 12 * * * root cd $APP_DIR && docker-compose -f docker-compose.prod.yml run --rm certbot renew --quiet && docker-compose -f docker-compose.prod.yml restart nginx
EOF

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
echo "üîç Performing final health check..."
sleep 10

if curl -f https://$DOMAIN/health > /dev/null 2>&1; then
    echo ""
    echo "üéâ =================================="
    echo "‚úÖ DEPLOYMENT SUCCESSFUL!"
    echo "üåê Application: https://$DOMAIN"
    echo "üìä API Docs: https://$DOMAIN/api/docs"
    echo "üîç Health: https://$DOMAIN/health"
    echo "===================================="
    echo ""
    echo "üìã Next steps:"
    echo "1. Configure Telegram bot webhook:"
    echo "   https://api.telegram.org/bot<TOKEN>/setWebhook?url=https://$DOMAIN/webhook"
    echo ""
    echo "2. Monitor logs:"
    echo "   docker-compose -f docker-compose.prod.yml logs -f"
    echo ""
    echo "3. Backup verification:"
    echo "   ls -la $BACKUP_DIR"
    echo ""
    echo "üîí Security features enabled:"
    echo "‚Ä¢ UFW Firewall (ports 22, 80, 443)"
    echo "‚Ä¢ Fail2ban protection"
    echo "‚Ä¢ SSL certificates with auto-renewal"
    echo "‚Ä¢ Rate limiting on API endpoints"
    echo "‚Ä¢ Security headers configured"
else
    echo "‚ùå Health check failed. Check logs:"
    echo "   docker-compose -f docker-compose.prod.yml logs"
fi
```

## –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ production

### 1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä:
```bash
# –°–∫–∞—á–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è
wget https://raw.githubusercontent.com/your-repo/deploy-production.sh
chmod +x deploy-production.sh

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ deployment
sudo ./deploy-production.sh
```

### 2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS:
```
A Record: connect-aitu.me -> YOUR_SERVER_IP
A Record: www.connect-aitu.me -> YOUR_SERVER_IP
```

### 3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram Webhook:
```bash
# –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:
curl -X POST "https://api.telegram.org/bot<YOUR_BOT_TOKEN>/setWebhook?url=https://connect-aitu.me/webhook"
```

–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π production deployment —Å:
- ‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –±—ç–∫–∞–ø–∞–º–∏  
- ‚úÖ Security –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
- ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –ª–æ–≥–∞–º–∏
- ‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–æ–≤

–ì–æ—Ç–æ–≤–æ –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ connect-aitu.me! 