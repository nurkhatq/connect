services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    container_name: aitu_frontend_prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://connect-aitu.me/api
      - NEXT_PUBLIC_TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME}
    depends_on:
      - backend
    networks:
      - aitu-network
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: aitu_backend_prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME}
      - APP_NAME=${APP_NAME}
      - DEBUG=${DEBUG}
      - ENVIRONMENT=${ENVIRONMENT}
      - DOMAIN=${DOMAIN}
      - UPLOAD_DIR=${UPLOAD_DIR}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
    networks:
      - aitu-network
    restart: unless-stopped
    healthcheck:  # ДОБАВЬТЕ ЭТО
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  telegram-bot:
    build: ./backend
    container_name: aitu_telegram_bot_prod
    command: python bot/main.py
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT}
      - DOMAIN=${DOMAIN}
    depends_on:
      backend:
        condition: service_healthy
      chat-service:  # Добавьте эту зависимость
        condition: service_started
    volumes:
      - ./backend:/app
    networks:
      - aitu-network
    restart: unless-stopped
  # === НОВЫЙ СЕРВИС! ===
  chat-service:
    build: ./chat-service
    container_name: aitu_chat_service
    environment:
      # OpenAI
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0}
      # Paths
      - DATA_FOLDER=/app/data
      - DATA_FOLDER_STUD=/app/data_stud
      - INDEXES_FOLDER=/app/indexes
      - INDEXES_FOLDER_STUD=/app/indexes_stud
      # Redis (используем тот же что и backend)
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # Performance
      - ENABLE_CACHE=${ENABLE_CACHE:-true}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - VECTOR_SEARCH_K=${VECTOR_SEARCH_K:-5}
      - CHUNK_SIZE=${CHUNK_SIZE:-512}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-50}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./chat-service/data_stud:/app/data_stud
      - chat_indexes:/app/indexes
      - chat_indexes_stud:/app/indexes_stud
      - chat_temp:/app/temp
    networks:
      - aitu-network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: aitu_postgres_prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aitu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: aitu_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - aitu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: aitu_nginx_prod
    ports:
      - "80:80"
      - "443:443" 
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
      - chat-service  # Добавили зависимость
    networks:
      - aitu-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  # Новые volumes для chat-service
  chat_indexes:
    driver: local
  chat_indexes_stud:
    driver: local
  chat_temp:
    driver: local

networks:
  aitu-network:
    driver: bridge