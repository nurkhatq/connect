#!/bin/bash
# ssl-simple-finish.sh - –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

set -e

echo "üéâ –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL"
echo "=================================="

source .env
DOMAIN=${DOMAIN:-connect-aitu.me}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.temp.yml down 2>/dev/null || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ Docker
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Docker..."
docker run --rm -v $(pwd)/certbot/conf:/etc/letsencrypt certbot/certbot certificates

# –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π docker-compose.prod.yml  
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cat > docker-compose.prod.yml << PRODEOF
services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    container_name: aitu_frontend_prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://$DOMAIN/api
      - NEXT_PUBLIC_TELEGRAM_BOT_USERNAME=\${TELEGRAM_BOT_USERNAME}
    depends_on:
      - backend
    networks:
      - aitu-network
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: aitu_backend_prod
    environment:
      - DATABASE_URL=\${DATABASE_URL}
      - REDIS_URL=redis://:\${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET_KEY=\${JWT_SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=\${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_USERNAME=\${TELEGRAM_BOT_USERNAME}
      - APP_NAME=\${APP_NAME}
      - DEBUG=\${DEBUG}
      - ENVIRONMENT=\${ENVIRONMENT}
      - DOMAIN=\${DOMAIN}
      - UPLOAD_DIR=\${UPLOAD_DIR}
      - MAX_FILE_SIZE=\${MAX_FILE_SIZE}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
    networks:
      - aitu-network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: aitu_postgres_prod
    environment:
      - POSTGRES_USER=\${POSTGRES_USER}
      - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
      - POSTGRES_DB=\${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aitu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \${POSTGRES_USER} -d \${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: aitu_redis_prod
    command: redis-server --appendonly yes --requirepass \${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=\${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - aitu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "\${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: aitu_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    networks:
      - aitu-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  aitu-network:
    driver: bridge
PRODEOF

echo "‚úÖ Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º frontend —Å –Ω–æ–≤—ã–º API URL
echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ frontend –¥–ª—è HTTPS..."
docker-compose -f docker-compose.prod.yml build frontend

# –ó–∞–ø—É—Å–∫
echo "üöÄ –ó–∞–ø—É—Å–∫ production —Å SSL..."
docker-compose -f docker-compose.prod.yml up -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose -f docker-compose.prod.yml ps

echo ""
echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx..."
docker-compose -f docker-compose.prod.yml logs nginx | tail -10

echo ""
echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTPS..."
curl -I https://$DOMAIN 2>/dev/null | head -3 || echo "‚ö†Ô∏è  HTTPS –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo ""
echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
curl -s https://$DOMAIN/api/ping || echo "‚ö†Ô∏è  API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo ""
echo "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "üì± –í–∞—à Telegram Mini App: https://$DOMAIN"
echo "üîß API endpoint: https://$DOMAIN/api"
echo ""
echo "‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs"
